---
description: 
globs: src/app/dashboard/components/dashboard.tsx,src/app/dashboard/components/panels/PanelManager.tsx,src/app/dashboard/contexts/SidebarContext.tsx
alwaysApply: false
---
# Spotlight Dashboard UI/UX 개선 규칙 (Markdown-Driven Code)

## 버전: 1.2.0
## 최종 수정일: 2025-05-19
## 작성자: Gemini AI

## 설명:
## 이 문서는 Spotlight 대시보드의 UI/UX 개선을 위한 구체적인 코드 변경 지침을 정의합니다.
## 각 규칙은 식별된 문제점을 해결하고 사용자 경험을 향상시키는 것을 목표로 합니다.
## 규칙 적용 시 관련 파일 및 컨텍스트를 면밀히 검토해야 합니다.
## 'glob'은 해당 규칙이 적용될 가능성이 높은 파일 패턴을 명시합니다.
## '구체적인 수정 방안 예시'는 실제 코드 변경에 대한 아이디어를 제공하며, '기대 효과'는 개선을 통해 얻을 수 있는 이점을 설명합니다.

---

## 규칙 목록:

### 1. UI 로직 및 디자인 일관성 강화

-   **규칙 ID:** `CONSISTENCY-001`
-   **문제점:** `dashboard.tsx` 와 `PanelManager.tsx` 등 여러 파일에 UI 로직이 분산되어 컴포넌트 간 디자인 및 동작 일관성 저해.
-   **설명:**
    -   공통 UI 로직 (예: 패널 열고 닫기, 상태에 따른 UI 변경 등)은 재사용 가능한 훅(Hook)이나 유틸리티 함수로 분리합니다.
    -   디자인 토큰(색상, 간격, 타이포그래피 등)은 `tailwind.config.js` 와 `src/app/dashboard/styles/dashboard.css` (CSS 변수)를 통해 중앙에서 관리하고, 컴포넌트에서는 이를 참조하여 일관성을 유지합니다.
    -   특히 `dashboard.tsx` 와 `PanelManager.tsx` 간의 패널 상태 및 표시 로직을 명확히 분리하거나, 하나의 고수준 컴포넌트에서 관리하도록 리팩토링합니다.
-   **대상 파일 (glob):**
    -   `src/app/dashboard/components/dashboard.tsx`
    -   `src/app/dashboard/components/panels/PanelManager.tsx`
    -   `src/app/dashboard/contexts/SidebarContext.tsx`
    -   `src/components/dashboard_UI/**/*.tsx`
    -   `tailwind.config.js`
    -   `src/app/dashboard/styles/dashboard.css`
-   **구체적인 수정 방안 예시:**
    -   **패널 관리 로직 중앙화:** `PanelManager.tsx`가 패널의 열림/닫힘 상태(`isOpen` prop)와 애니메이션만 담당하도록 하고, 각 패널의 컨텐츠 및 내부 상태는 해당 패널 컴포넌트(예: `DocumentPanel.tsx`, `ProjectPanel.tsx` - 신규 생성)에서 관리하도록 분리합니다. `dashboard.tsx`는 이들 패널 컴포넌트를 조건부로 렌더링하고 `isOpen` 상태를 전달합니다.
    -   **디자인 토큰 일관성:** `tailwind.config.js`에 정의된 `colors`, `spacing`, `fontSize` 등을 `src/app/dashboard/styles/dashboard.css`에서 CSS 변수로 재정의하고, UI 컴포넌트들은 이 CSS 변수를 우선적으로 사용하도록 합니다. 예를 들어, `--primary-text-color`, `--panel-background-color` 등을 정의하고 사용합니다.
    -   **공통 훅 생성:** `usePanelVisibility(panelName: string)`과 같은 커스텀 훅을 만들어 `SidebarContext`와 연동하여 특정 패널의 가시성 상태를 가져오고 제어하는 로직을 캡슐화합니다.
-   **기대 효과:**
    -   코드 유지보수성 향상 및 중복 코드 감소.
    -   UI 요소 간 디자인 일관성 확보로 사용자 경험 향상.
    -   새로운 기능 추가 또는 기존 기능 변경 시 영향 범위 최소화.

### 2. 모바일 반응성 개선 및 테스트 강화

-   **규칙 ID:** `RESPONSIVE-001`
-   **문제점:** `DashboardLayout.tsx`의 모바일/데스크탑 사이드바 로직 분리에도 불구하고, 다양한 모바일 환경에서의 레이아웃 문제 발생 가능성.
-   **설명:**
    -   모든 대시보드 컴포넌트 (특히 `DashboardLayout.tsx`, `Sidebar.tsx`, `DashboardHeader.tsx`, `PanelManager.tsx`, `calendar.tsx`, `reports.tsx`, `rich-text-editor.tsx`)에 대해 다양한 모바일 화면 크기(iPhone SE, Galaxy Fold, iPad Mini 등) 및 방향(가로/세로)에서의 테스트를 수행합니다.
    -   Tailwind CSS의 반응형 유틸리티 (`sm:`, `md:`, `lg:`)를 적극 활용하여 레이아웃 및 요소 크기를 조정합니다.
    -   모바일 환경에서는 터치 영역을 고려하여 버튼 및 상호작용 요소의 크기를 최소 `44px * 44px`로 확보합니다. (`Button.tsx`의 `TouchTarget` 컴포넌트 활용)
    -   모바일에서는 `Sheet` 컴포넌트를 사용한 사이드바가 화면을 가리지 않고 부드럽게 동작하는지, 내부 스크롤은 정상적으로 작동하는지 확인합니다.
-   **대상 파일 (glob):**
    -   `src/app/dashboard/components/layout/DashboardLayout.tsx`
    -   `src/app/dashboard/components/layout/Sidebar.tsx`
    -   `src/app/dashboard/components/layout/DashboardHeader.tsx`
    -   `src/app/dashboard/components/panels/PanelManager.tsx`
    -   `src/app/dashboard/components/calendar.tsx`
    -   `src/app/dashboard/components/reports.tsx`
    -   `src/app/dashboard/components/rich-text-editor/**/*.tsx`
    -   `src/app/dashboard/styles/dashboard.css`
    -   `src/components/Button.tsx`
    -   `src/components/dashboard_UI/sheet.tsx`
-   **구체적인 수정 방안 예시:**
    -   **CSS Grid/Flexbox 활용:** `DashboardLayout.tsx`에서 메인 컨텐츠 영역과 패널 영역이 모바일에서 적절히 스택되거나 오버레이 되도록 CSS Grid 또는 Flexbox 레이아웃을 반응형으로 조정합니다. 예: `flex-col lg:flex-row`.
    -   **툴바 가로 스크롤:** `rich-text-editor/EditorToolbar.tsx`의 툴바 버튼들이 모바일에서 화면을 벗어날 경우, 가로 스크롤을 적용하거나, 중요한 기능만 표시하고 나머지는 "더보기" 메뉴로 그룹화합니다.
    -   **차트 요소 크기 조정:** `reports.tsx`의 `recharts` 컴포넌트에서 `tickFormatter`, `labelStyle`, `legendWrapperStyle` 등을 사용하여 모바일 화면 크기에 따라 폰트 크기, 간격 등을 동적으로 조정합니다.
-   **기대 효과:**
    -   다양한 모바일 기기에서 일관되고 쾌적한 사용자 경험 제공.
    -   레이아웃 깨짐 방지 및 정보 가독성 향상.

### 3. 상태 관리 구조 개선 (Context API 최적화)

-   **규칙 ID:** `STATE-MGMT-001`
-   **문제점:** 다수의 Context API (`SidebarContext`, `EditorContext`, `SearchContext`) 사용으로 인한 상태 관리 분산 및 복잡성 증가.
-   **설명:**
    -   각 Context의 책임 범위를 명확히 하고, 서로 다른 Context 간의 의존성을 최소화합니다.
    -   전역적으로 필요한 상태와 특정 기능/컴포넌트 트리 내에서만 필요한 상태를 구분합니다.
    -   불필요하게 많은 상태나 함수가 Context를 통해 제공되고 있지 않은지 검토하고, 꼭 필요한 것만 노출합니다.
    -   상태 변경이 잦고 광범위하게 영향을 미치는 경우, Zustand, Jotai, Recoil과 같은 더 정교한 상태 관리 라이브러리 도입을 고려할 수 있으나, 현재 규모에서는 Context 최적화에 우선 집중합니다.
-   **대상 파일 (glob):**
    -   `src/app/dashboard/contexts/**/*.tsx`
    -   `src/app/dashboard/components/dashboard.tsx`
    -   `src/app/dashboard/components/panels/PanelManager.tsx`
    -   `src/app/dashboard/components/rich-text-editor/index.tsx`
-   **구체적인 수정 방안 예시:**
    -   **Context 분리/통합:** `SidebarContext.tsx`의 `activeNavItem`과 패널 열림 상태(`documentPanelOpen`, `projectPanelOpen`)가 강하게 연관되어 있으므로, 이를 `NavigationContext` 또는 `ViewManagerContext`와 같이 하나의 Context로 통합하거나, 혹은 각 패널별로 더 작은 Context(예: `DocumentPanelContext`)로 분리하여 `PanelManager` 내부에서만 사용하도록 합니다.
    -   **Provider 범위 최적화:** `EditorProvider`는 `RichTextEditorView.tsx` 컴포넌트 내부에서만 감싸도록 하여, 에디터와 관련 없는 컴포넌트의 불필요한 리렌더링을 방지합니다.
    -   **Context 값 최소화:** 각 Context에서 제공하는 `value` 객체에 꼭 필요한 상태와 상태 변경 함수만 포함시키고, 파생 상태는 `useMemo` 등을 활용하여 Context 외부에서 계산하도록 합니다.
-   **기대 효과:**
    -   상태 관리 로직의 명확성 증대 및 디버깅 용이성 향상.
    -   불필요한 리렌더링 감소로 인한 성능 개선.
    -   기능 변경 또는 추가 시 코드 수정 범위 예측 및 관리 용이.

---
**(이하 나머지 규칙들도 위와 같은 형식으로 구체적인 수정 방안 예시와 기대 효과를 추가합니다.)**

... (규칙 4부터 17까지 상세 내용 추가) ...

---

## 일반 가이드라인:

-   **주석 및 문서화:** 코드 변경 시 관련 주석을 명확히 작성하고, 필요한 경우 컴포넌트 사용법이나 로직에 대한 문서를 업데이트합니다.
-   **테스트:** UI 변경 후에는 반드시 기능 테스트, 반응형 테스트, 접근성 테스트를 수행하여 예상치 못한 문제를 방지합니다.
-   **점진적 적용:** 모든 규칙을 한 번에 적용하기보다는, 중요도와 영향 범위에 따라 단계적으로 적용하고 검증하는 것이 안전합니다.
-   **팀 공유:** 변경 사항과 그 이유는 팀 내에 공유하여 일관된 개발 방향을 유지합니다.


이 상세화된 `.mdc` 파일이 Spotlight 대시보드의 UI/UX를 한 단계 끌어올리는 데 도움이 되기를 바랍니다.